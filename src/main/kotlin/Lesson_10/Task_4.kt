package Lesson_10

fun main() {
    var gameCounter = 0
    var humanWins = 0
    var botWins = 0

    while (true) {
        gameCounter++
        val player = (1..6).random()
        println("–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–æ—Å–∏–ª ${player} –æ—á–∫–æ–≤!")
        val computer = (1..6).random()
        println("–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±—Ä–æ—Å–∏–ª ${computer} –æ—á–∫–æ–≤!")

        val (updatedHumanScore, updatedBotScore) = results(player, computer, humanWins, botWins)
        humanWins = updatedHumanScore
        botWins = updatedBotScore

        if (gameCounter >= 1) {
            print("–•–æ—Ç–∏—Ç–µ –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑? –í–≤–µ–¥–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç: ")
            val userChoice = readln()

            if (userChoice.equals("–¥–∞", ignoreCase = true)) {
                continue
            } else {
                println("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: —á–µ–ª–æ–≤–µ–∫ - ${humanWins} –æ—á–∫–æ–≤, –º–∞—à–∏–Ω–∞ - ${botWins} –æ—á–∫–æ–≤.")
                break
            }
        }

    }
}


fun results(human: Int, bot: Int, humanScore: Int, botScore: Int): Pair<Int, Int> {

    var updatedHumanScore = humanScore
    var updatedBotScore = botScore

    when {
        human > bot -> {
            println("–ü–æ–±–µ–¥–∏–ª–æ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ!")
            updatedHumanScore++
        }

        human == bot -> println("–•—Ä—É–ø–∫–æ–µ –ø–µ—Ä–µ–º–∏—Ä–∏–µ")
        else -> {
            println("–ü–æ–±–µ–¥–∏–ª–∞ –º–∞—à–∏–Ω–∞ üôÅ")
            updatedBotScore++
        }
    }

    return Pair(updatedHumanScore, updatedBotScore)
}