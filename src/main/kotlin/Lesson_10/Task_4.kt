package Lesson_10

//–£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π –∏–≥—Ä—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ –æ—á–µ—Ä–µ–¥–∏ –±—Ä–æ—Å–∞—é—Ç –∫–æ—Å—Ç–∏.
//–ü–æ–±–µ–∂–¥–∞–µ—Ç –≤—ã–±—Ä–æ—Å–∏–≤—à–∏–π –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ. –¢–µ–ø–µ—Ä—å –¥–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–≥—Ä–∞—Ç—å –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –µ–º—É –Ω–µ –Ω–∞–¥–æ–µ—Å—Ç.
//–í –∫–æ–Ω—Ü–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–∫–æ–ª—å–∫–æ –ø–∞—Ä—Ç–∏–π –æ–Ω –≤—ã–∏–≥—Ä–∞–ª.
//
//- –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å: ‚Äú–•–æ—Ç–∏—Ç–µ –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑? –í–≤–µ–¥–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç‚Äù;
//- –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
//–∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–≥—Ä—É —Å –≤—ã–≤–æ–¥–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π —á–µ–ª–æ–≤–µ–∫–∞;
//- –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 –º–µ—Ç–æ–¥–∞ (–¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫—É–±–∏–∫–æ–≤);
//- –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ main(), –∞ 2 –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏.

fun main() {
    var gameCounter = 0
    var humanWins = 0
    var botWins = 0

    while (true) {
        gameCounter++
        val player = (1..6).random()
        println("–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–æ—Å–∏–ª ${player} –æ—á–∫–æ–≤!")
        val computer = (1..6).random()
        println("–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±—Ä–æ—Å–∏–ª ${computer} –æ—á–∫–æ–≤!")

        val (updatedHumanScore, updatedBotScore) = results(player, computer, humanWins, botWins)
        humanWins = updatedHumanScore
        botWins = updatedBotScore

        if (gameCounter >= 1) {
            print("–•–æ—Ç–∏—Ç–µ –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑? –í–≤–µ–¥–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç: ")
            val userChoice = readln()

            if (userChoice.equals("–¥–∞", ignoreCase = true)) {
                continue
            } else {
                println("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: —á–µ–ª–æ–≤–µ–∫ - ${humanWins} –æ—á–∫–æ–≤, –º–∞—à–∏–Ω–∞ - ${botWins} –æ—á–∫–æ–≤.")
                break
            }
        }

    }
}


fun results(human: Int, bot: Int, humanScore: Int, botScore: Int): Pair<Int, Int> {

    var updatedHumanScore = humanScore
    var updatedBotScore = botScore

    when {
        human > bot -> {
            println("–ü–æ–±–µ–¥–∏–ª–æ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ!")
            updatedHumanScore++
        }
        human == bot -> println("–•—Ä—É–ø–∫–æ–µ –ø–µ—Ä–µ–º–∏—Ä–∏–µ")
        else -> {
            println("–ü–æ–±–µ–¥–∏–ª–∞ –º–∞—à–∏–Ω–∞ üôÅ")
            updatedBotScore++
        }
    }

    return Pair(updatedHumanScore, updatedBotScore)
}